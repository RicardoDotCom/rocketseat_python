## Sobre o desafio

üí° Como tivemos um m√≥dulo completo, **n√£o** vamos descrever detalhadamente rotas e propriedades dos registros a serem criadas, mas sim, as regras e requisitos que a API deve ter.

O motivo disso √© para voc√™s **tamb√©m** exercitarem ****o desenvolvimento e a estrutura√ß√£o dessa parte.


A ideia desse desafio √© criar uma API para um banco contendo opera√ß√µes para as tabelas de Pessoa Jur√≠dica e Pessoa F√≠sica

Cria√ß√£o de um sistema banc√°rio com clientes:

- Pessoas F√≠sicas
- Pessoas Jur√≠dicas

### Regras da aplica√ß√£o

- A aplica√ß√£o deve estar conectada a um banco SQLite;
- O projeto deve conter uma interface Cliente, com os m√©todos: Sacar dinheiro e Realizar extrato.
- As controllers devem possuir testes unit√°rios para garantir que est√£o funcionando conforme devem funcionar.
- Dever√° ser poss√≠vel: Criar e listar usu√°rios.

### Regras de neg√≥cio

- O m√©todo ‚Äúsacar dinheiro‚Äù deve possuir um limite m√°ximo menor em Pessoa f√≠sica do que para pessoa jur√≠dica

### Conceitos que pode praticar

- MVC
- Testes unit√°rios (e quem sabe de integra√ß√£o üëÄ)
- Cria√ß√£o e integra√ß√£o com banco de dados SQLite

### Aviso!

Regras para aplica√ß√£o e regras de neg√≥cio s√£o obrigat√≥rias, por√©m a forma como v√£o ser implementadas ficam a cargo do desenvolvedor.

### Material complementar

Script para a cria√ß√£o do banco de dados:

CREATE TABLE IF NOT EXISTS pessoa_fisica (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    renda_mensal REAL,
    idade INTEGER,
    nome_completo TEXT,
    celular TEXT,
    email TEXT,
    categoria TEXT,
    saldo REAL
);

CREATE TABLE IF NOT EXISTS pessoa_juridica (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    faturamento REAL,
    idade INTEGER,
    nome_fantasia TEXT,
    celular TEXT,
    email_corporativo TEXT,
    categoria TEXT,
    saldo REAL
);

INSERT INTO pessoa_fisica (renda_mensal, idade, nome_completo, celular, email, categoria, saldo)
VALUES
(5000.00, 35, 'Jo√£o da Silva', '9999-8888', 'joao@example.com', 'Categoria A', 10000.00),
(4000.00, 45, 'Maria Oliveira', '7777-6666', 'maria@example.com', 'Categoria B', 15000.00),
(6000.00, 28, 'Pedro Santos', '5555-4444', 'pedro@example.com', 'Categoria C', 8000.00);

INSERT INTO pessoa_juridica (faturamento, idade, nome_fantasia, celular, email_corporativo, categoria, saldo)
VALUES
(100000.00, 10, 'Empresa XYZ', '1111-2222', 'contato@empresa.com', 'Categoria A', 50000.00),
(80000.00, 5, 'Empresa ABC', '3333-4444', 'contato@abc.com', 'Categoria B', 70000.00),
(120000.00, 8, 'Empresa 123', '5555-6666', 'contato@123.com', 'Categoria C', 90000.00);


## Reposit√≥rio de consulta

Antes de acessar o reposit√≥rio com o desafio conclu√≠do, recomendamos fortemente que tente realizar o desafio.

Caso tenha d√∫vidas/dificuldades t√©cnicas, temos o f√≥rum para te ajudar.

https://github.com/rocketseat-education/python-bankclients-mvc
